/**
 * Created by Administrator on 2016/12/12.
 */

const common = require('commonutils').ctrl_common;
const errorCodeTable = require('commonutils').errorCodeTable;
const expandResources = require('commonutils').expandResources;
const _ = require('lodash');



class BaseInterface {
    constructor(dataTranform,busiHandler)
    {
        this.dataTranform = dataTranform;
        this.busiHandler = busiHandler;

        this.def_list_offset = 0;
        this.def_list_limit = 25;
        
    };

    async create(context)
    {
        try {

            let inputObj = await this.dataTranform.parseBody(context,true);

            let res = await this.busiHandler.create(context,inputObj);

            let retJson =await this.dataTranform.geneRetJson(res,context);
            context.status = 201;
            context.body = retJson;
        }
        catch (e) { //处理其实错误分支
            common.handlerError(context, e);
        }
    };


    async retrieve(context)
    {
        try {
            let {expand=''} =await this.dataTranform.parseQs(context);
            let  uuid =await this.dataTranform.parsePath(context);

            let res = await this.busiHandler.retrieve(context,uuid);


            if (res) {
                let retJson =await this.dataTranform.geneRetJson(res,context);
               // retJson = yield expandResources.expandResources(retJson,expand);

                context.status = 200;
                context.body = retJson;
            }
            else {
                let error = new Error();
                error.name = 'Error';
                error.status = 404;
                error.code = 1599;
                error.message = errorCodeTable.errorCode2Text(error.code);
                error.description = error.message;
                throw error;
            }
        }
        catch (e) { //处理其实错误分支
            common.handlerError(context, e);
        }

    };

    async update(context)
    {
        try {
            let inputObj =await this.dataTranform.parseBody(context);
            let  uuid  =await this.dataTranform.parsePath(context);

            let res = await this.busiHandler.update(context,uuid,inputObj);

            let retJson =await this.dataTranform.geneRetJson(res,context);

            context.status = 200;
            context.body = retJson;
        }
        catch (e) { //处理其实错误分支
            common.handlerError(context, e);
        }

    };

    async list(context)
    {
        let query =await this.dataTranform.parseQs(context);

        return await this.listByQs(context,query);

    };

    async listByQs(context,query)
    {
        try {

            let params = context.params;
            let { offset = this.def_list_offset,limit = this.def_list_limit, expand ='' } =
                query;

            offset  = _.toNumber(offset);
            limit = _.toNumber(limit);

            query.offset = offset;
            query.limit = limit;

            /** 2016/12/21 此处的query与context中原始的query可能不一样，新增了一些通过path路径转换出来的
             * 新的过滤条件。
             lpy-modifyed  */
            let res = await this.busiHandler.list(context,query);

            context.query.offset = offset;
            context.query.limit = limit;


            let retJson =await this.dataTranform.geneListRetJson(res.retList,res.count,context,query);
            //retJson = yield expandResources.expandResources(retJson,expand);

            context.status = 200;
            context.body = retJson;
        }
        catch (e) {
            common.handlerError(context, e);
        }
    };

    async listByQsCustom(context,query,handlerFunc,geneListRetFunc)
    {
        try {

            let params = context.params;
            let { offset = this.def_list_offset,limit = this.def_list_limit, expand ='' } =
                query;

            offset  = _.toNumber(offset);
            limit = _.toNumber(limit);



            query.offset = offset;
            query.limit = limit;

            let res = await handlerFunc.call(this.busiHandler,context,query);

            context.query.offset = offset;
            context.query.limit = limit;

            let retJson =await geneListRetFunc.call( this.dataTranform,res.retList,res.count,context);
            //retJson = yield expandResources.expandResources(retJson,expand);

            context.status = 200;
            context.body = retJson;
        }
        catch (e) {
            common.handlerError(context, e);
        }
    };


    async delete(context)
    {
        try {
            let  uuid  =await this.dataTranform.parsePath(context);

            let res = await this.busiHandler.delete(context,uuid);
            if (res) {
                context.status = 204;
                context.body = {};
            }
            else {
                let error = new Error();
                error.name = 'Error';
                error.status = 404;
                error.code = 1599;
                error.message = errorCodeTable.errorCode2Text(error.code);
                error.description = error.message;
                throw error;
            }
        }
        catch (e) { //处理其实错误分支
            common.handlerError(context, e);
        }
    };

    async execByQsCustom(context,handlerFunc,geneRetFunc)
    {
        try {
            let {  expand ='' } =
                context.query;
            let res = await handlerFunc.call(this.busiHandler,context);

            let retJson =await geneRetFunc.call( this.dataTranform,res,context);
            //retJson = yield expandResources.expandResources(retJson,expand);

            context.status = 200;
            context.body = retJson;
        }
        catch (e) {
            common.handlerError(context, e);
        }
    };

    async execByUpdateCustom(context,data,handlerFunc,geneRetFunc,bUpdated = true)
    {
        try {

            let res = await handlerFunc.call(this.busiHandler,context,data);

            let retJson =await geneRetFunc.call( this.dataTranform,res,context);

            context.status = bUpdated ? 200 : 201;
            context.body = retJson;
        }
        catch (e) {
            common.handlerError(context, e);
        }
    };

    async batchCreate(context)
    {
        try {
            let data =await this.dataTranform.parseBatchBody(context,true);

            let res = await this.busiHandler.batchCreate(context,data);

            let retJson =await this.dataTranform.geneBatchRetJson(res,context,true);
            context.status = 201;
            context.body = retJson;
        }
        catch (e) {
            common.handlerError(context, e);
        }
    };

    /** 2017/2/20    bUpdateSameValue:添加是否更新相同的字段标志，
     lpy-modifyed    意思是，如果要对所有的记录，都将某一字段的值更新为同一个，则置为TRUE,
                     否则置为FALSE.
     */
    async batchUpdate(context,bUpdateSameValue = true)
    {
        try {
            let data =await this.dataTranform.parseBatchBody(context,false);

            let res = await this.busiHandler.batchUpdate(context,data,bUpdateSameValue);

            let retJson =await this.dataTranform.geneBatchRetJson(res,context,false);
            context.status = 200;
            context.body = retJson;
        }
        catch (e) {
            common.handlerError(context, e);
        }
    };


    async batchDelete(context)
    {
        try {
            let data =await this.dataTranform.parseBatchBody(context,false);

            let res = await this.busiHandler.batchDelete(context,data);
            if (res) {
                context.status = 204;
                context.body = {};
            }
            else {
                let error = new Error();
                error.name = 'Error';
                error.status = 404;
                error.code = 1599;
                error.message = errorCodeTable.errorCode2Text(error.code);
                error.description = error.message;
                throw error;
            }
        }
        catch (e) {
            common.handlerError(context, e);
        }
    };

}

module.exports = BaseInterface;
