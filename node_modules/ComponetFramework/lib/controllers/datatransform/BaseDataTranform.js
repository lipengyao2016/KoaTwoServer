/**
 * Created by Administrator on 2016/12/12.
 */



class BaseDataTranform {
    constructor(tableName)
    {
        this.tableName = tableName;
        this.tableUUID = this.tableName + 'UUID';
    };

    parseDataFromBody(dataObj,dataTypeObj,defDataValueObj,body,bCreated)
    {
        for(let key in dataTypeObj)
        {
            let defaultValue;
            if(dataTypeObj[key] == 'int')
            {
                defaultValue = 0;
            }
            else if (dataTypeObj[key] == 'float')
            {
                defaultValue = 0.0;
            }
            else if (dataTypeObj[key] == 'string')
            {
                defaultValue = '' ;
            }
            else
            {
                defaultValue = null;
            }

            if(defDataValueObj.hasOwnProperty(key))
            {
                defaultValue = defDataValueObj[key];
            }

            dataObj[key] =  this.getAttrData(body,key,bCreated,defaultValue);
        }
    }

    /** 2016/12/13  返回create 和 update要传递的参数对象。
     * 2016/12/19   body,params两个参数换成context的上下文环境。
     lpy-modifyed  */
    async parseBody(context,bCreated =false)
    {
        return context.request.body;
    };


    /** 2017/1/19   批量创建或者更新的接口，
     * 将body,params的参数转换为需要的list数据对象。
     lpy-modifyed  */
    async parseBatchBody(context,bCreated =false)
    {
        return context.request.body;
    };


    setParamStr(bSetV,Value)
    {
        return bSetV ? Value : undefined;
    }

    getAttrData(obj,key,bSetV,defaultV)
    {
        if(obj && obj[key])
        {
            return obj[key];
        }
        else
        {
            return bSetV ? defaultV : undefined;
        }

    }


    /** 2016/12/13
     * 解析查询参数。主要返回给list的查询条件使用。
     * 用来从params路径中解析出部分参数，作为查询条件保存到query中。
     *
     lpy-modifyed  */
    async parseQs(context)
    {
        return context.query;
    };

    /** 2016/12/13  返回retrieve、update 和delete中要获取的资源UUID.
     lpy-modifyed
      以UUID的值返回。

     example:
     let {departmentUUID } = params;
     return departmentUUID;
     */
    async parsePath(context)
    {
       //return context.params;
        
        let tableUUID = context.params[this.tableUUID];
        return tableUUID;

    };


    /** 2016/12/13
     *   retData:
     *     {res,   //返回的实际数据对象。
     *
     *     以下两个参数换成context的上下文环境。
     *     //query,  //此接口的查询参数对象。
     *    // params  //此接口的路径参数对象。
     *     };
     *
     lpy-modifyed  */
    async geneRetJson(res,context)
    {
        return res;
    };

    /** 2016/12/13
     * retData:
     *     {res,   //返回的实际数据容器。
     *      :{
     *      retList:  数据列表
     *      count:    数据个数。
     *      }
     *      以下两个参数换成context的上下文环境。
     *     query,  //此接口的查询参数对象。
     *     params//此接口的路径参数对象。
     *     };
     lpy-modifyed  */
    async geneListRetJson(retList,count,context,query)
    {
         return {
                 offset:query.offset,
                 limit:query.limit,
                 count:count,
                 items:retList,
         };
    };


    /** 2017/1/19  批量创建或者更新的数据转换结果。
     * res: 批量
     lpy-modifyed  */
    async geneBatchRetJson(res,context,bCreated =false)
    {

    };



}

module.exports = BaseDataTranform;