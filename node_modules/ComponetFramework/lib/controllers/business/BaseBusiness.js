/**
 * Created by Administrator on 2016/12/12.
 */

class BaseBusiness {
    constructor(dataProxyer)
    {
        this.dataProxyer = dataProxyer;
    };

    /** 2016/12/13
     *param: busiData: 实际要创建的数据对象。没有带UUID.由proxy层自动生成。
     * return : 成功返回新的数据对象,失败返回null。
     lpy-modifyed  */
    async create(context,busiData)
    {
       return await this.dataProxyer.create(busiData);
    };


    /** 2016/12/13
     *param: :
     * uuid  //要获取的资源ID.
     * return: 成功返回实际的数据对象,失败返回null。
     lpy-modifyed  */
    async retrieve(context,uuid)
    {
        return await this.dataProxyer.retrieve(uuid);
    };

    /** 2016/12/13
     *param: busiData: 实际要更新的数据对象。
     *  {uuid  //要更新的资源ID.
     * }。
     * return : 成功返回更新后的数据对象,失败返回null。
     lpy-modifyed  */
    async update(context,uuid,busiData)
    {
        busiData.uuid = uuid;
        return await this.dataProxyer.update(busiData);
    };

    /** 2016/12/13
     * context:
     * {query,  //查询参数。
     * params,  //路径参数。
     * offset,  //偏移。
     * limit    //长度。
     * }
     * 返回的对象 (必须由makeListRet的方法来生成结果，否则不识别):
     * {
     * retList, //返回的数据列表。
     * count    //返回的数据计数。
     * }
     lpy-modifyed  */
    async list(context,query)
    {
        let [retList,count]= await Promise.all([
            this.dataProxyer.list(query,query.offset,query.limit),
            this.dataProxyer.getCount(query)]);

        return this.makeListRet(retList,count);

    };

    /** 2016/12/14  生成list列表返回的数据容器对象。
     lpy-modifyed  */
    makeListRet(list,cnt)
    {
        return {retList:list,count:cnt};
    }

    /** 2016/12/13
     *param: :
     * uuid  //要删除的资源ID.
     * return : 成功返回true,失败返回null。
     lpy-modifyed  */
    async delete(context,uuid)
    {
        return await this.dataProxyer.delete(uuid);
    };


    /** 2017/1/19  批量创建的业务接口。
     *  busiData:从body解析获取的待创建对象的列表。
     lpy-modifyed  */
    async batchCreate(context, busiData) {
        return await this.dataProxyer.batchCreate(busiData);
    };


    /** 2017/1/19  批量更新的业务接口。
     *  busiData:从body解析获取的待创建对象的列表。
     lpy-modifyed  */
    async batchUpdate(context, busiData,bUpdateSameValue) {
        return await this.dataProxyer.batchUpdate(busiData,bUpdateSameValue);
    };

    /** 2017/2/16  批量删除的业务接口。
     *  busiData:从body解析获取的待创建对象的列表。
     lpy-modifyed  */
    async batchDelete(context, busiData) {
        return await this.dataProxyer.batchDelete(busiData);
    };

}

module.exports = BaseBusiness;
