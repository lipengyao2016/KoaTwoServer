/**
 * Created by Administrator on 2016/9/12.
 */

const errorCodeTable =require('../common/errorCodeTable');
const _ = require('lodash');

function querySQLGenerator(queryKeys){
    let {exactKeys=[],vagueKeys=[],inKeys=[],DateKeys=[],changeKeys={}} = queryKeys;

    return function(queryJson) {
        let queryCondition = _.clone(queryJson);
        _.keys(changeKeys).map(key=>{
            queryCondition[changeKeys[key]] = queryCondition[key];
            delete queryCondition[key];
        });
        let sqlArray = [];
        //精确查询
        exactKeys.map( key =>{
            if(queryCondition[key]){
                sqlArray.push(`${key}='${queryCondition[key]}'`)
            }
        });
        //模糊like查询
        vagueKeys.map( key =>{
            if(queryCondition[key]){
                if (queryCondition[key].indexOf('*') == -1) {
                    sqlArray.push(`${key}='${queryCondition[key]}'`);
                } else {
                    let str = queryCondition[key].replace(/\*/g, '%');
                    sqlArray.push(`${key} like '${str}'`);
                }
            }
        });
        //集合in查询
        inKeys.map(key=>{
            if( !_.isUndefined(queryCondition[key])){
                let arrayStr = queryCondition[key];

                if (_.isArray(arrayStr)) {
                    if (arrayStr.length > 0) {
                        let ss = arrayStr.map(str => `'${str}'`);
                        let tmpStr = _.join(ss,',');
                        sqlArray.push(`${key} in (${tmpStr})`);
                    }
                }
                else {
                    if(_.isEmpty(queryCondition[key])){
                        sqlArray.push(`${key} is null`);
                    }
                    else {
                        sqlArray.push(`${key}='${queryCondition[key]}'`);
                    }

                }
            }
        });
        //日期时间查询
        DateKeys.map(key=>{
            if(queryCondition[key]){
                let time = queryCondition[key];
                let timeArray = time.replace(/(\[)|(\])|(\")/g,"").split(',');
                if (timeArray[0]!=' ' && timeArray[0]!='') { sqlArray.push(`${key} >= '${timeArray[0]}'`);}
                if (timeArray[1]!=' ' && timeArray[1]!='') { sqlArray.push(`${key} <= '${timeArray[1]}'`);}
            }
        });
        //链接所有SQL
        let queryStr = _.join(sqlArray,' and ');
        //console.log(queryStr);
        return queryStr;
    };
}
class Proxy {
    constructor(table,convert2DBInfo, convert2LogicInfo, generateQueryCondition) {
        this.table = table;
        this.convert2DBInfo = convert2DBInfo;
        this.convert2LogicInfo = convert2LogicInfo;
        this.generateQueryCondition = generateQueryCondition;
    };

    *create(info) {
        let dbInfo = this.convert2DBInfo(info, true);
        yield this.table.create(dbInfo);
        return yield this.retrieve(dbInfo.uuid);
    };

    *retrieve(uuid) {
        let rows = yield this.table.retrieve(uuid);
        if (rows.length === 0) {
            return null;
        }
        else if (rows.length === 1) {
            return this.convert2LogicInfo(rows[0]);
        }
        else {
            let error = new Error();
            error.name = 'InternalError';
            error.status = 409;
            error.code = 7037;
            error.message = errorCodeTable.errorCode2Text(error.code);
            error.description = 'Find much resource.';
            throw error;
        }
    };

    *update(info) {
        let dbInfo = this.convert2DBInfo(info);
        yield this.table.update(dbInfo);
        return yield this.retrieve(info.uuid);
    };

    *delete (uuid) {
        let ret = yield this.table.delete(uuid);
        if(ret === 1){
            return true;
        }
        else {
            let error = new Error();
            error.name = 'Error';
            error.status = 404;
            error.code = 1599;
            error.message = errorCodeTable.errorCode2Text(error.code);
            error.description = 'Find much resource.';
            throw error;
        }
    };

    *list(queryConditions, offset = 0, limit = 25) {

        /** 2016/12/22  缺省按创建时间降序排列。
         lpy-modifyed  */
        if(!queryConditions.orderBy || _.isEmpty(queryConditions.orderBy))
        {
            queryConditions.orderBy = 'createdAt DESC';
        }

        let rows = yield this.table.query(this.generateQueryCondition(queryConditions), offset, limit, '*', queryConditions.orderBy);
        return rows.map(item=>this.convert2LogicInfo(item),this);
    };

    *listAll(queryConditions){
        let rows = yield this.table.queryBy(this.generateQueryCondition(queryConditions), '*');
        return rows.map(item=>this.convert2LogicInfo(item),this);
    };

    *getCount(queryConditions) {
        return yield this.table.getCount(this.generateQueryCondition(queryConditions));
    };
}

exports.querySQLGenerator = querySQLGenerator;
exports.Proxy = Proxy;